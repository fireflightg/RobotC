#pragma config(Hubs,  S1, HTMotor,  HTServo,  HTMotor,  none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Motor,  mtr_S1_C1_2,     lift,          tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C3_2,     intake,        tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S1_C2_1,    fieldGrabberRight,    tServoStandard)
#pragma config(Servo,  srvo_S1_C2_2,    fieldGrabberLeft,     tServoStandard)
#pragma config(Servo,  srvo_S1_C2_3,    scoopBridge,          tServoStandard)
#pragma config(Servo,  srvo_S1_C2_4,    frontBridge,          tServoStandard)
#pragma config(Servo,  srvo_S1_C2_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_6,    servo6,               tServoNone)
#pragma config(Motor,  mtr_S1_C1_1,     driveRight,    tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C3_1,     driveLeft,     tmotorTetrix, openLoop)
#pragma config(Sensor, S4,     touchSensor,         sensorTouch)

//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"

#define _open 0
#define _grab 100
#define _closed 105
#define _inside 205
#define _threshold 20

void init(){
	servo[fieldGrabberLeft] = 265;//inside-15;
	servo[fieldGrabberRight] = 235-inside;
	servo[scoopBridge] = 127;
	servo[frontBridge] = 0;
}

float exponentialJoystick(int joyVal){
	return (float)5.60015*pow(2.718281828,0.96781*(abs(joyVal)/40));
}

void sticksDown(){
	servo[fieldGrabberLeft] = open;
	servo[fieldGrabberRight] = 255-open;
}

void sticksUp(){
	servo[fieldGrabberLeft] = inside-15;
	servo[fieldGrabberRight] = 255-inside;
}

void allStop(){
	motor[driveLeft] = 0;
	motor[driveRight] = 0;
	motor[lift] = 0;
	motor[intake] = 0;
	servo[frontBridge] = 127;
	servo[scoopBridge] = 127;
}

//Joystick one controls the drive train and goal grabbers
void joyStickOne(){
	
	getJoystickSettings(joystick);
	
	if(abs(joystick.joy1_y1)>_threshold)
	{
		motor[driveRight] = joystick.joy1_y1;
	}
	else
	{
		motor[driveRight] = 0;
	}

	if(abs(joystick.joy1_y2)>_threshold)
	{
		motor[driveLeft] = joystick.joy1_y2;
	}
	else{
		motor[driveLeft] = 0;
	}

	if(joy1Btn(8))
	{
		sticksDown();
	}

	if(joy1Btn(6))
	{
		sticksUp();
	}

}

//Joystick two controls the lift, scoop bridge, and intake
void joyStickTwo()
{

	getJoystickSettings(joystick);

	if(joy2Btn(5))
	{
		motor[lift] = -20;
	}
	else if(joy2Btn(6))
	{
		motor[lift] = 100;
	}

}

task main()
{
	
	init();

	while(true)
	{
		joystickOne();
		joyStickTwo();
		delay(5);
	}
}